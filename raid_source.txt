using System.Windows;
using System.Windows.Controls;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.IO;



namespace raid
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
        public class UserData
        {
            public string Username { get; set; }
            public string Discriminator { get; set; }
            public string Id { get; set; }
            public string Email { get; set; }
            public string Phone { get; set; }
        }
        private async void XP_Click(object sender, RoutedEventArgs e)
        {
            string cn_id = Channelid.Text;
            var mult = int.Parse(multi_box.Text);
            string msg = messageBox.Text;
            var cooldown = int.Parse(cd.Text);
            string token = dataFile();
            string username = await validate(token);
            string randtxt = "facts.txt";
            if (File.Exists(randtxt))
            {
                string[] messages = File.ReadAllText(randtxt).Split(new string[] { "\r\n\r\n" }, StringSplitOptions.RemoveEmptyEntries);

                // Check if there are messages in the file
                if (messages.Length > 0)
                {
                    for (int i = 0; i < mult; i++)
                    {
                        Random random = new Random();
                        string randomMessage = messages[random.Next(messages.Length)];

                        await SendMessage(randomMessage, cn_id, username, cooldown, token);
                    }
                }
                else
                {
                    Console.WriteLine("Error: No messages found in the file.");
                }
            }
            else
            {
                Console.WriteLine($"Error: {randtxt} not found.");
            }
        }
        private async void QuickXP_Click(object sender, RoutedEventArgs e)
        {
            string cn_id = Channelid.Text;
            string token = dataFile();
            string randtxt = "facts.txt";
            string username = await validate(token);
            if (File.Exists(randtxt))
            {
                string[] messages = File.ReadAllText(randtxt).Split(new string[] { "\r\n\r\n" }, StringSplitOptions.RemoveEmptyEntries);

                // Check if there are messages in the file
                if (messages.Length > 0)
                {
                    while (true)
                    {
                        Random random = new Random();
                        string randomMessage = messages[random.Next(messages.Length)];

                        await SendMessage(randomMessage, cn_id, username, 15, token);
                    }
                }
                else
                {
                    Console.WriteLine("Error: No messages found in the file.");
                }
            }
            else
            {
                Console.WriteLine($"Error: {randtxt} not found.");
            }
        }
        private async void Join_Click(object sender, RoutedEventArgs e)
        {
            string link = InviteBox.Text;
            string token_path = "token.txt";
            string[] token_lines = File.ReadAllLines(token_path);
            List<Task> tasks = new List<Task>();
            foreach (string line in token_lines)
            {
                string tk = line;
                string token = tk.Replace("\"", "").Replace(" ", "");

                Task task = join(token, link);
                tasks.Add(task);

            }
            await Task.WhenAll(tasks);

        }
        private async void Raid_Click(object sender, RoutedEventArgs e)
        {
            string msg = messageBox.Text;
            var mult = int.Parse(multi_box.Text);
            string cn_id = Channelid.Text;
            string token_path = "token.txt";
            string[] token_lines = File.ReadAllLines(token_path);
            List<Task> tasks = new List<Task>();
            //the loop
            foreach (string line in token_lines)
            {
                string tk = line;
                string token = tk.Replace("\"", "").Replace(" ", "");
                string username = await validate(token);
                var cooldown = int.Parse(cd.Text);

                Task task = mainRaid(msg, cn_id, username, cooldown, token, mult);
                tasks.Add(task);

            }
            await Task.WhenAll(tasks);
        }

        private async Task mainRaid(string msg, string cn_id, string username, int cooldown, string token, int mult)
        {
            string path = "raid_text.txt";
            string[] message_rand = File.ReadAllText(path).Split(new string[] { "\r\n\r\n" }, StringSplitOptions.RemoveEmptyEntries);
            bool isChecked = raidSelect.IsChecked ?? false;
            if (isChecked) 
            {
                if (message_rand.Length > 0)
                {
                    for (int x = 0; x < mult; x++)
                    {
                        Random random = new Random();
                        string randomMessage = message_rand[random.Next(message_rand.Length)];
                        await SendMessage(randomMessage, cn_id, username, cooldown, token);
                    }
                }
                else
                {
                    Console.WriteLine("Raid_text.txt is empty");
                }
            }
            else
            {
                for (int i = 0; i < mult; i++)
                {
                    await SendMessage(msg, cn_id, username, cooldown, token);
                }
            }         
        }
        static string dataFile()
        {
            string path = "token.txt";

            try
            {
                string token = File.ReadAllText(path).Trim();
                token = token.Replace("\"", "").Replace(" ", "");

                if (File.Exists(token))
                {
                    return token;
                }
                else
                {
                    Console.WriteLine("Error, token.txt error");
                    return token;
                }
            }
            catch (Exception ex)
            {
                string executablePath = File.ReadAllText(path).Trim();
                return executablePath;
            }
        }
        private async Task join(string token, string link)
        {
            //string code = link.Replace("https://discord.gg/", "");
            string code = "uCtrFRjq";
            string url = $"https://discord.com/api/v9/invites/{code}";
            var client = new HttpClient();
            client.DefaultRequestHeaders.Add("Authorization", token);
            //client.DefaultRequestHeaders.Add("content-type", "application/json");

            string jsonBody = "{}";
            //new StringContent(jsonBody)
            var response = await client.PostAsync(url, null);
        }
        private async Task<string> validate(string token)
        {
            string url = "https://discord.com/api/users/@me";
            var client = new HttpClient();

            // Set headers
            client.DefaultRequestHeaders.Add("Authorization", token);
            //client.DefaultRequestHeaders.Add("Content-Type", "application/json");

            var response = await client.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                //DebugBox.AppendText($"Valid token: {token}");
                var data = await response.Content.ReadAsStringAsync();
                var userData = JsonSerializer.Deserialize<UserData>(data);

                string username = userData.Username + "#" + userData.Discriminator;
                string id = userData.Id;
                string email = userData.Email;
                string phone = userData.Phone;

                // Return or process the username
                return username;

            }

            else
            {
                //DebugBox.AppendText($"Invalid token: {token}");
                Environment.Exit(1);
                return null;  // This line will never be reached, added for completeness
            }
        }
        private async Task SendMessage(string msg, string channelId, string username, int wait, string token)
        {
            if (msg == null)
            {
                return;
            }
            else
            {
                string url = $"https://discord.com/api/channels/{channelId}/messages";
                var client = new HttpClient();

                client.DefaultRequestHeaders.Add("Authorization", token);
                //client.DefaultRequestHeaders.Add("Content-Type", "application/json");
                string message = msg;
                var data = new { content = message };

                var response = await client.PostAsJsonAsync(url, data);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"{username} | Message sent to {channelId}");
                }
                else
                {
                    Console.WriteLine($"{username} | Error {response.StatusCode}: {channelId}");
                }

                await Task.Delay(wait);
            }       
        }

        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }
    }
}